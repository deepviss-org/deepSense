{
  "openapi": "3.0.0",
  "info": {
    "description": "DeepSense is a generic semantic API for retrieving, and managing streams of observations",
    "version": "1.1.0",
    "title": "DeepSense",
    "termsOfService": "https://deepviss.ro",
    "contact": {
      "name":"Bogdan Bocse",
      "email": "bogdan@enten.ro"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "dataset",
      "description": "Information about the datasets",
      "externalDocs": {
        "description": "Datasets API",
        "url": "https://deepviss.org"
      }
    }
  ],
  "paths": {
    "/observation/list": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve a list of observations",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetObservationList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Observation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/observation/create": {
      "post": {
        "tags": [
          "dataset"
        ],
        "summary": "Append an observation",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "CreateObservation",
        "parameters": [
          {
            "in": "query",
            "name": "observationName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "observationType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Observation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }


  },
  "components": {
    "schemas": {
      "Avatar": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "lifeForm": {
            "type": "string",
            "enum": [
              "silicon",
              "carbon"
            ]
          }
        }
      },
      "Observer": {
        "type": "object",
        "description": "Represents autonomous observer, such as a camera, a phone or a IoT device",
        "properties": {
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of the observer",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "desktop-user",
              "mobile-user",
              "station",
              "smartphone",
              "iot-device",
              "virtual-iot-device"

            ]
          }
        }
      },

      "SpatialPosition": {
        "type": "object",
        "properties": {
          "latitude": {
            "description": "The latitude at which the observer is installed.",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "The longitude at which the observer is installed.",
            "type": "number",
            "format": "double"
          },
          "elevation": {
            "description": "The elevation from the ground at which the observer is installed, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "pitch": {
            "description": "Pitch rotation of the observer, measured in sexagesimal degrees (not radians)",
            "type": "number",
            "format": "double"
          },
          "yaw": {
            "description": "Yaw rotation of the observer, measured in sexagesimal degrees (not radians)",
            "type": "number",
            "format": "double"
          },
          "roll": {
            "description": "Roll rotation of the observer, measured in sexagesimal degrees (not radians)",
            "type": "number",
            "format": "double"
          }
        }
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable definition or symbol",
            "example": ["air temperature", "wind speed"]
          },
          "unitSI": {
            "type": "string",
            "description": "Human readable definition or symbol",
            "example": ["T", "m/s", "m/s^2"]
          },
          "measurementId": {
            "type": "string",
            "description": "The unique id of this type of measurement",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          }
        }
      },


      "ObserverConfiguration": {
        "type": "object",
        "description": "Represents the technical details of the autonomous observer, such as a camera, a phone or a IoT device. Maps to Observer.",
        "properties": {
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "desktop-user",
              "mobile-user",
              "station",
              "smartphone"
            ]
          },
          "SpatialPosition": {
            "$ref": "#/definitions/Observation",
            "type": "Observation",
            "description": "Spatial position of observer"
          }
        }
      },
      "PackedObservation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "0d",
              "1d",
              "2d",
              "3d",
              "4d"
            ]
          },
          "precision": {
            "type": "string",
            "enum": [
              "integer",
              "long",
              "float",
              "double"
            ]
          },
          "collectionStartTime": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "collectionEndTime": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "UWRBFUWRW18B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0EUWEBFWUBEFWUE"
          }
        }
      },
      "Transmission": {
        "type": "object",
        "properties": {
          "protocolVersion": {
            "type": "integer",
            "format": "int32",
            "description": "Size of files when represented in binary, without additional encoding. Used for de-duplication.",
            "example": 1345789
          },
          "timestampCommInit": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "recordCount": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of transmission.",
            "example": 1345789
          },
          "observations": {
            "description": "Registered observations",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Observation",
              "type": "Observation"
            }
          }
        }
      },
      "Observation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "scalar",
              "rgb-static-photo",
              "rgb-live-photo",
              "rgb-video",
              "audio-rgb-video",
              "audio-only",
              "text"
            ]
          },
          "creationTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          }
        }
      }


    }
  },
  "externalDocs": {
    "description": "Find out more about DeepVISS",
    "url": "https://deepviss.org"
  }
}