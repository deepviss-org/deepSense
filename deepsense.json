{
  "openapi": "3.0.0",
  "info": {
    "description": "DeepSense is a generic semantic API for retrieving, and managing streams of observations",
    "version": "1.1.0",
    "title": "DeepSense",
    "termsOfService": "https://deepviss.ro",
    "contact": {
      "name":"Bogdan Bocse",
      "email": "bogdan@enten.ro"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "dataset",
      "description": "Information about the datasets",
      "externalDocs": {
        "description": "Datasets API",
        "url": "https://deepviss.org"
      }
    }
  ],
  "paths": {
    "/observation/list": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve a list of observations",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetObservationList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Observation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/observation/create": {
      "post": {
        "tags": [
          "dataset"
        ],
        "summary": "Append an observation",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "CreateObservation",
        "parameters": [
          {
            "in": "query",
            "name": "observationName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "observationType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Observation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }


  },
  "components": {
    "schemas": {
      "Avatar": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "lifeForm": {
            "type": "string",
            "enum": [
              "silicon",
              "carbon"
            ]
          }
        }
      },
      "Observer": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "lifeForm": {
            "type": "string",
            "enum": [
              "silicon",
              "carbon"
            ]
          }
        }
      },
      "PackedObservation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "0d",
              "1d",
              "2d",
              "3d",
              "4d"
            ]
          },
          "precision": {
            "type": "string",
            "enum": [
              "integer",
              "long",
              "float",
              "double"
            ]
          },
          "collectionStartTime": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "collectionEndTime": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "UWRBFUWRW18B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0EUWEBFWUBEFWUE"
          }
        }
      },
      "Transmission": {
        "type": "object",
        "properties": {
          "protocolVersion": {
            "type": "integer",
            "format": "int32",
            "description": "Size of files when represented in binary, without additional encoding. Used for de-duplication.",
            "example": 1345789
          },
          "timestampCommInit": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "recordCount": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of transmission.",
            "example": 1345789
          },
          "observations": {
            "description": "Registered observations",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Observation",
              "type": "Observation"
            }
          }
        }
      },
      "Observation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "scalar",
              "rgb-static-photo",
              "rgb-live-photo",
              "rgb-video",
              "audio-rgb-video",
              "audio-only",
              "text"
            ]
          },
          "creationTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "owningAccountId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "UWRBFUWRW18B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0EUWEBFWUBEFWUE"
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Dogs"
          }
        }
      },
      "Challenge": {
        "type": "object",
        "properties": {
          "challengeId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of challenge. ",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "datasetId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of dataset",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "evaluationPolicyId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of evaluation policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "creationTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "accessType": {
            "type": "string",
            "enum": [
              "public",
              "private",
              "confidential"
            ]
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Dogs"
          },
          "completionPercentage": {
            "type": "int",
            "description": "completion percentage of a challenge",
            "example": "70"
          }
        }
      },
      "MediaDescriptor": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of files when represented in binary, without additional encoding. Used for de-duplication.",
            "example": 1345789
          },
          "hash": {
            "type": "string",
            "description": "Cryptographic hash of original file. Used for de-duplication.",
            "example": "FGX8993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "pHash": {
            "type": "string",
            "description": "Perceptual representation of the content of the media. Used for de-duplication.",
            "example": "pre"
          }
        }
      },
      "MediaItem": {
        "type": "object",
        "properties": {
          "mediaItemId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of media item",
            "example": "UERE80768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "rgb-static-photo",
              "rgb-live-photo",
              "rgb-video",
              "audio-rgb-video",
              "audio-only",
              "text"
            ]
          },
          "format": {
            "type": "string",
            "enum": [
              "image/heif",
              "image/heic",
              "image/heif-sequence",
              "image/jpeg",
              "image/png",
              "video/mp4",
              "video/3gpp",
              "video/quicktime",
              "video/x-msvideo",
              "video/x-ms-wmv"
            ]
          },
          "descriptor": {
            "type": "MediaDescriptor",
            "$ref": "#/definitions/MediaDescriptor",
            "description": "Information about the evaluation of the accuracy of this tag."
          }

        }
      },
      "Evaluation": {
        "type": "object",
        "description": "The confidence of a merged tag (from several tags) or the overall.",
        "properties": {
          "confidence": {
            "description": "The confidence of the merged tag (from several tags), based on IoU (Intersection over Union) of the composing tags",
            "type": "number",
            "format": "double"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "Avatar",
            "$ref": "#/definitions/Avatar",
            "description": "Alpha-numeric, unique id of user who has performed the task",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "avatarId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of user who has performed the task.",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "challengeId": {
            "type": "string",
            "description": "Alpa-numeric, unique id of challenge. ",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "attemptSequenceNumber": {
            "type": "string",
            "description": "Identifies the number of evaluation attempts performed on this specific media item.",
            "example": 2
          },
          "generationTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user"
          },
          "submissionTimestamp": {
            "type": "string",
            "pattern": "/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user"
          },
          "evaluationStatus": {
            "type": "string",
            "enum": [
              "unallocated",
              "leased",
              "not-evaluated",
              "passed",
              "failed",
              "skipped",
              "timed-out"
            ]
          }
        }
      },



      "EvaluationPolicy": {
        "type": "object",
        "description": "The parameters used in the evaluation of a challenge, its tasks and their tags.",
        "properties": {
          "evaluationPolicyId": {
            "description": "Unique ID of evaluation policy",
            "type": "string"
          },
          "spatialOverlapThreshold": {
            "description": "The minimum amount of overlap between two tags, which, in conjuction with a matching object-type, is a condition for merging two tags",
            "type": "number",
            "format": "double",
            "example": 0.5
          },
          "harshness": {
            "description": "The penalty incurred for a tag that is NOT matched with other tags",
            "type": "number",
            "format": "double",
            "example": 0.5
          },
          "rankOfMean": {
            "description": "The rank (power) of the generalized mean used for evaluating a task composed of several tags. Negative values mean harsher evaluations, values larger than 1.0 mean less harsh evaluations. Default value is 1.0 (arithmetic mean). ",
            "type": "number",
            "format": "double",
            "example": 1.0
          },
          "summationType": {
            "description": "If set to 'algebraic', negative results on one task will be substracted from user payout.",
            "type": "string",
            "enum": [
              "algebraic",
              "non-negative"
            ]
          }
        }
      }

    }
  },
  "externalDocs": {
    "description": "Find out more about DeepVISS",
    "url": "https://deepviss.org"
  }
}