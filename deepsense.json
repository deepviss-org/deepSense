{
  "openapi": "3.0.1",
  "info": {
    "description": "DeepSense is a generic semantic API for retrieving, and managing streams of observations",
    "version": "1.1.0",
    "title": "DeepSense",
    "termsOfService": "https://deepviss.org",
    "contact": {
      "name":"Bogdan Bocse",
      "email": "bogdan@bocse.ro"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "observer",
      "description": "Information about the observer.",
      "externalDocs": {
        "description": "Observer API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "instrument",
      "description": "Information about the instruments and measurements.",
      "externalDocs": {
        "description": "Instrument API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "measurement",
      "description": "Information about measurements.",
      "externalDocs": {
        "description": "Measurement API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "observation",
      "description": "Information about the observations performed.",
      "externalDocs": {
        "description": "Observation API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "authentication",
      "description": "Generate authentication token.",
      "externalDocs": {
        "description": "Token authentication endpoint",
        "url": "https://deepviss.org"
      }
    }
  ],
  "paths": {
    "/observer/list": {
      "get": {
        "tags": [
          "observer"
        ],
        "summary": "Retrieve the list of observers which the account is authorized for",
        "description": "Get list of observers.",
        "operationId": "GetObserverList",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Observer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/instrument/list": {
      "get": {
        "tags": [
          "instrument"
        ],
        "summary": "Retrieve the list of instruments that are mounted on a specific observer",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetInstrumentList",
        "parameters": [
          {
            "in": "query",
            "name": "observerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the observer"
          },
          {
            "in": "query",
            "name": "instrumentId",
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the instrument that is mounted on the observer."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Instrument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/measurement/list": {
      "get": {
        "tags": [
          "measurement"
        ],
        "summary": "Retrieve the list of measurements that are allowed by a specific instrument of a specific observer",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetMeasurementList",
        "parameters": [
          {
            "in": "query",
            "name": "observerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the observer"
          },
          {
            "in": "query",
            "name": "instrumentId",
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the instrument that is mounted on the observer."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Measurement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/observation/list": {
      "get": {
        "tags": [
          "observation"
        ],
        "summary": "Retrieve a list of observations",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetObservationList",

        "parameters": [
          {
            "in": "query",
            "name": "observerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the observer"
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "string"
            },
            "description": "The first moment of the period"
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": {
              "type": "string"
            },
            "description": "The last moment of the period"
          }
        ]
      ,
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Observation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/observation/": {
      "post": {
        "tags": [
          "observation"
        ],
        "summary": "Append an observation",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "CreateObservation",
        "parameters": [
          {
            "in": "query",
            "name": "observationName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "observationType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Observation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },


    "/event/list": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Retrieve a list of events associated to an asset, such as a crop or a greenhouse.",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetEventList",

        "parameters": [
          {
            "in": "query",
            "name": "assetID",
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the asset"
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The first moment of the period"
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The last moment of the period"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/event/maintenance/list": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Retrieve a list of maintenance events associated to an asset, such as a crop or a greenhouse.",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetEventListPerAsset",

        "parameters": [
          {
            "in": "query",
            "name": "assetID",
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the asset"
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The first moment of the period"
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The last moment of the period"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes" : {
      "bearerAuth" : {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Observer": {
        "type": "object",
        "description": "Represents a collection of instruments installed on the same autonomous device, which represents the observer",
        "properties": {
          "observerId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of the instrument",
            "example": "E80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "desktop-user",
              "mobile-user",
              "smartphone",
              "iot-device",
              "virtual-iot-device"
            ]
          },
          "SpatialPosition": {
            "$ref": "#/definitions/SpatialPosition",
            "type": "SpatialPosition",
            "description": "Spatial position of the instrument"
          }
        }
      },
      "Instrument": {
        "type": "object",
        "required": [
          "observerId"
        ],
        "description": "Represents an atomic instrument, such as a sensor",
        "properties": {
          "instrumentId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of the instrument",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of the instrument",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "sensor",
              "virtual-sensor",
              "smartphone",
              "desktop-computer"
            ]
          },
          "RelativeSpatialPosition": {
            "$ref": "#/definitions/RelativeSpatialPosition",
            "type": "RelativeSpatialPosition",
            "description": "Spatial position of instrument"
          }
        }
      },
      "InstrumentConfiguration": {
        "type": "object",
        "required": [
          "observerId"
        ],
        "description": "[private] Represents the technical details of the instrument, such as a particular sensor.",
        "properties": {
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "vendor": {
            "type": "string",
            "description": "The name of the vendor",
            "example": "Huawei"
          },
          "make": {
            "type": "string",
            "description": "The series name of this component",
            "example": "Station"
          },
          "model": {
            "type": "string",
            "description": "The exact model of this component ",
            "example": "P65"
          },
          "manufacturingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "installationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "measurements": {
            "description": "Type of measurements supported by this instrument",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Measurement",
              "type": "Measurement"
            }
          },
          "maintenanceEvents": {
            "description": "The list of maintenance events that have been performed",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Event",
              "type": "Event"
            }
          }
        }
      },
      "SpatialPosition": {
        "type": "object",
        "properties": {
          "latitude": {
            "description": "The latitude at which the observer is installed.",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "The longitude at which the observer is installed.",
            "type": "number",
            "format": "double"
          },
          "elevation": {
            "description": "The elevation from the ground at which the observer is installed, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "pitch": {
            "description": "Pitch rotation of the observer, measured in sexagesimal degrees (not radians), relative to a reference which is perpendicular to the ground, line of sight paralel to the ground, facing north",
            "type": "number",
            "format": "double"
          },
          "yaw": {
            "description": "Yaw rotation of the observer, measured in sexagesimal degrees (not radians), relative to a reference which is perpendicular to the ground, line of sight paralel to the ground, facing north",
            "type": "number",
            "format": "double"
          },
          "roll": {
            "description": "Roll rotation of the observer, measured in sexagesimal degrees (not radians), relative to a reference which is perpendicular to the ground, line of sight paralel to the ground, facing north",
            "type": "number",
            "format": "double"
          },
          "correctionX": {
            "description": "dX: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "correctionY": {
            "description": "dY: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "correctionZ": {
            "description": "dZ: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "reference": {
            "type": "string",
            "enum": [
              "ground-fixed",
              "ground-with-correction"
            ]
          }
        }
      },
      "RelativeSpatialPosition": {
        "type": "object",
        "properties": {
          "correctionX": {
            "description": "dX: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "correctionY": {
            "description": "dY: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "correctionZ": {
            "description": "dZ: Any on-site adjustment to the position of the observer, measured in meters.",
            "type": "number",
            "format": "double"
          },
          "referenceObserverId": {
            "type": "string",
            "description": "Id of the observer to which this instrument is attached.",
            "example":"QJWIFRQFJKSERGQ"

          }
        }
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable definition or symbol",
            "example": "airTemperature"

          },
          "unitSI": {
            "type": "string",
            "description": "Human readable definition or symbol",
            "example":  "mps2"

          },
          "measurementId": {
            "type": "string",
            "description": "The unique id of this type of measurement",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818"
          }
        }
      },
      "Event": {
        "type": "object",
        "discriminator": {
          "propertyName": "eventType"
        },
        "required": [
          "eventId",
          "eventType"
        ],
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Alpha-numeric, unique id of event",
            "example": "EWFUWEGBUWRG342497EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "eventType": {
            "type": "string",
            "description": "discriminator",
            "example": "ObserverMaintenanceEvent"
          }
        }
      },
      "ValidationEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "properties": {
              "corroboratingUsers": {
                "description": "IDs of users or user-avatars who confirm as event as relevant.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              }
            }
          }
        ]
      },
      "InferenceEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "properties": {
              "corroboratingModels": {
                "description": "IDs of models that have contributed to this prediction",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "confidence": {
                "type": "number",
                "format": "double"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              }
            }
          }
        ]
      },
      "AssetMaintenanceEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "appliedTreatments": {
                "description": "IDs of treatments that have been applied",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ObserverMaintenanceEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
              },
              "decommissionedParts": {
                "description": "Sensors or parts that have been decommissioned",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InstrumentConfiguration",
                  "type": "InstrumentConfiguration"
                }
              },
              "installedParts": {
                "description": "Sensors or parts that have been installed",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InstrumentConfiguration",
                  "type": "InstrumentConfiguration"
                }
              }
            }
          }
        ]
      },
      "PackedObservation": {
        "description": "Encoded format for high-volume data formats (picture, video, audio or other tensorforms)",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "0d",
              "1d",
              "2d",
              "3d",
              "4d"
            ]
          },
          "precision": {
            "type": "string",
            "enum": [
              "integer",
              "long",
              "float",
              "double"
            ]
          },
          "collectionStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "collectionEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "observerId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "UWRBFUWRW18B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0EUWEBFWUBEFWUE"
          }
        }
      },
      "Transmission": {
        "description": "Encoded format for high-volume data formats (picture, video, audio or other tensorforms)",
        "type": "object",
        "properties": {
          "protocolVersion": {
            "type": "integer",
            "format": "int32",
            "description": "Sequential number of protocol version (the version of this file)",
            "example": 1345789
          },
          "timestampCommInit": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "firmwareId": {
            "type": "string",
            "description": "The "
          },
          "transmissionCount": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of transmission.",
            "example": 1345789
          },
          "records": {
            "description": "Observation which have occurred in the same time-window are grouped into the same record.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Record",
              "type": "Record"
            }
          }
        }
      },
      "Record": {
        "type": "object",
        "description": "Registered observations from scalar instruments (collect one or just a few measurements per transmission)",
        "properties": {
          "observerId":
          {
            "type": "string",
            "description": "Reference to observer (by id) which has recorded this sequence of measurements."
          },
          "startSamplingTime": {
            "type": "string",
            "format": "date-time",
            "description": "Formerly timestampAcqBegin. Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "endSamplingTime": {
            "type": "string",
            "format": "date-time",
            "description": "Formerly timestampAcqEnd. Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "observations": {
            "description": "Observation which have occurred in the same time-window are grouped into the same record.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Observation",
              "type": "Observation"
            }
          }
        }
      },
      "Observation": {
        "description": "The observation, as it occurred in the specified time-window",
        "type": "object",
        "properties": {
          "instrumentId": {
            "type": "string",
            "description": "The randomly assigned identifier of the instrument type"
          },
          "instrumentHealth": {
            "type": "string",
            "enum": [
              "healthy",
              "inconsistent",
              "malfunction",
              "unreachable"
            ]
          },
          "measurementId": {
            "type": "string",
            "description": "The randomly assigned identifier of the measurement type, as standardized in IS (International System)"
          },
          "value": {
            "type": "SampledValue",
            "description": "Statistical features of the observable captured during the observation time-window"
          }
        }
      },

      "SampledValue": {
        "description": "Statistical features of the observable captured during the observation time-window",
        "type": "object",
        "properties": {

          "min": {
            "description": "Minimum value encountered during sampling",
            "type": "number",
            "format": "double"
          },
          "average": {
            "description": "The average (arithmetic mean) of the readings",
            "type": "number",
            "format": "double"
          },
          "median": {
            "description": "Median value encountered during sampling",
            "type": "number",
            "format": "double"
          },
          "max": {
            "description": "Maximum value encountered during sampling",
            "type": "number",
            "format": "double"
          },
          "histogram": {
            "description": "Distribution of measurement intensity on a requester-defined quantization lattice",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }

        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],

  "externalDocs": {
    "description": "Find out more about DeepSense",
    "url": "https://deepviss.org"
  }
}
